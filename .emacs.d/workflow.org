#+TITLE: Org Mode Workflow
#+PROPERTY: header-args:emacs-lisp :tangle ./lisp/kraken-workflow.el

This file contains the description and configuration of the productivity workflow I use with Org Mode.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#principles][Principles]]
  - [[#dont-look-at-org-files-to-find-the-next-task-use-the-agenda-view][Don't look at Org files to find the next task, use the agenda view]]
  - [[#ensure-sufficient-metadata-on-tasks-for-effective-filtering][Ensure sufficient metadata on tasks for effective filtering]]
  - [[#keep-a-daily-log-of-work-being-done][Keep a daily log of work being done]]
- [[#tasks][Tasks]]
  - [[#figure-out-how-to-refile-tasks-to-an-org-capture-target][Figure out how to refile tasks to an org-capture target]]
- [[#file-paths][File Paths]]
- [[#workflow-states][Workflow States]]
- [[#tags][Tags]]
- [[#agendas][Agendas]]
- [[#capture-templates][Capture Templates]]
- [[#old-configuration][Old Configuration]]
  - [[#agenda][Agenda]]
  - [[#tags][Tags]]
  - [[#tasks][Tasks]]
  - [[#capture-templates][Capture Templates]]
- [[#module-setup][Module Setup]]
:END:

* Principles

** Don't look at Org files to find the next task, use the agenda view
** Ensure sufficient metadata on tasks for effective filtering
** Keep a daily log of work being done
* Tasks

Here are some things I need to do to make this workflow even more effective:

** TODO Figure out how to refile tasks to an org-capture target
I want to put them in the "Completed Tasks" entry of that day

* File Paths

The location where my =Notes= folder lives changes in some cases

#+begin_src emacs-lisp

  (setq org-directory
        "~/.org/notes")

  (setq org-agenda-files `(,org-directory))

  (defun kraken/org-path (path)
    (expand-file-name path org-directory))

  (setq org-default-notes-file (kraken/org-path "Inbox.org"))

#+end_src

* Workflow States

I try to keep my set of workflow states simple so that I can filter on them easily:

- =TODO= - A task that should be done at some point
- =NEXT= - This task should be done next (in the Getting Things Done sense)
- =BACK= - A task in the backlog to be done some day but not now
- =WAIT= - Waiting for someone else to be actionable again
- =DONE= - It's done!

I also make sure to set them up in the order I want =org-sort-entries= to sort them in when I use the =o= option upon invoking that command.

#+begin_src emacs-lisp

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "|" "WAIT(w)" "BACK(b)")))

  ;; TODO: org-todo-keyword-faces
  (setq org-todo-keyword-faces
    '(("NEXT" . (:foreground "orange red" :weight bold))
      ("WAIT" . (:foreground "HotPink2" :weight bold))
      ("BACK" . (:foreground "MediumPurple3" :weight bold))))

#+end_src

* Tags

Tags are used to filter all tasks to find anything actionable in a particular context.  I use the =@home= and =@work= tags for explicit contexts and then the rest are used for filtering tasks for agenda views.

- =followup= - Someone is waiting on me to follow up on this task, it should be prioritized above others
- =batch= - The task can be batched with others (low effort)

#+begin_src emacs-lisp

  ;; Configure common tags
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@home" . ?H)
       ("@work" . ?W)
       ("batch" . ?b)
       ("followup" . ?f)))

#+end_src

* Agendas

#+begin_src emacs-lisp

  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-span 'day)
  (setq org-agenda-start-with-log-mode t)

  (setq org-agenda-custom-commands
        `(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Actions")))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                   (org-agenda-files '(,(kraken/org-path "Inbox.org")))
                   (org-agenda-text-search-extra-files nil)))))

          ("n" "Next Tasks"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))))

#+end_src

* Capture Templates

#+begin_src emacs-lisp

  (defun kraken/get-todays-journal-file-name ()
    "Gets the journal file name for today's date"
    (interactive)
    (let* ((journal-file-name
             (expand-file-name
               (format-time-string "%Y/%Y-%2m-%B.org")
               (kraken/org-path "Journal/")))
           (journal-year-dir (file-name-directory journal-file-name)))
      (if (not (file-directory-p journal-year-dir))
        (make-directory journal-year-dir))
      journal-file-name))


  (defun kraken/on-org-capture ()
    ;; Don't show the confirmation header text
    (setq header-line-format nil)

    ;; Control how some buffers are handled
    (let ((template (org-capture-get :key t)))
      (pcase template
        ("jj" (delete-other-windows)))))

  (add-hook 'org-capture-mode-hook 'kraken/on-org-capture)

  (setq org-capture-templates
    `(("t" "Tasks")
      ("tt" "Task" entry (file ,(kraken/org-path "Inbox.org"))
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
      ("ts" "Clocked Entry Subtask" entry (clock)
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("je" "General Entry" entry
           (file+olp+datetree ,(kraken/org-path "Journal.org"))
           "\n* %<%I:%M %p> - %^{Title} \n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)
      ("jt" "Task Entry" entry
           (file+olp+datetree ,(kraken/org-path "Journal.org"))
           "\n* %<%I:%M %p> - Task Notes: %a\n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)
      ("jj" "Journal" entry
           (file+olp+datetree ,(kraken/org-path "Journal.org"))
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)))

#+end_src

* Old Configuration

The following blocks are being migrated over from my Org Mode configuration in [[file:Emacs.org][Emacs.org]].  I've disabled tangling for them so that they don't get written out to =workflow.el= in favor of my new configuration above.

** Agenda

#+begin_src emacs-lisp :tangle no

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
        `(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "FLOW" ((org-agenda-overriding-header "Workflow Tasks")))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))
            (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                   (org-agenda-files '(,(kraken/org-path "Inbox.org")))
                   (org-agenda-text-search-extra-files nil)))))

          ("n" "Next Tasks"
           ((todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("p" "Active Projects"
           ((agenda "")
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-max-todos 5)
                   (org-agenda-files org-agenda-files)))))

          ("w" "Workflow Status"
           ((todo "WAIT"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "REVIEW"
                  ((org-agenda-overriding-header "In Review")
                   (org-agenda-files org-agenda-files)))
            (todo "PLAN"
                  ((org-agenda-overriding-header "In Planning")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "BACKLOG"
                  ((org-agenda-overriding-header "Project Backlog")
                   (org-agenda-todo-list-sublevels nil)
                   (org-agenda-files org-agenda-files)))
            (todo "READY"
                  ((org-agenda-overriding-header "Ready for Work")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "COMPLETED"
                  ((org-agenda-overriding-header "Completed Projects")
                   (org-agenda-files org-agenda-files)))
            (todo "CANC"
                  ((org-agenda-overriding-header "Cancelled Projects")
                   (org-agenda-files org-agenda-files)))))

          ;; Projects on hold
          ("h" tags-todo "+LEVEL=2/+HOLD"
           ((org-agenda-overriding-header "On-hold Projects")
            (org-agenda-files org-agenda-files)))

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))))

  (use-package org-super-agenda
    :after org
    :config
    (org-super-agenda-mode 1)
    (setq org-super-agenda-groups
          '(;; Each group has an implicit boolean OR operator between its selectors.
            (:name "Today"  ; Optionally specify section name
                   :time-grid t  ; Items that appear on the time grid
                   :todo "NEXT")  ; Items that have this TODO keyword
            (:name "Important"
                   ;; Single arguments given alone
                   :priority "A")
            )))

#+end_src

** Tags

#+begin_src emacs-lisp :tangle no

  ;; Configure common tags
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@home" . ?H)
       ("@work" . ?W)
       ("batch" . ?b)
       ("next" . ?n)
       ("followup" . ?f)
       ("recurring" . ?r)))

  ;; Configure task state change tag triggers
  ;; (setq org-todo-state-tags-triggers
  ;;   (quote (("CANC" ("cancelled" . t))
  ;;           ("WAIT" ("waiting" . t))
  ;;           ("HOLD" ("waiting") ("onhold" . t))
  ;;           (done ("waiting") ("onhold"))
  ;;           ("TODO" ("waiting") ("cancelled") ("onhold"))
  ;;           ("DONE" ("waiting") ("cancelled") ("onhold")))))

#+end_src

** Tasks

#+begin_src emacs-lisp :tangle no

  ;; Configure TODO settings
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-datetree-add-timestamp 'inactive)
  (setq org-habit-graph-column 60)
  (setq org-fontify-whole-heading-line t)
  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "PROC" "FLOW(f)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")
      (sequence "GOAL(g)" "|" "ACHIEVED(v)" "MAINTAIN(m)")))

#+end_src

** Capture Templates

Information on template expansion can be found in the [[https://orgmode.org/manual/Template-expansion.html#Template-expansion][Org manual]].

#+begin_src emacs-lisp :tangle no

  (defun kraken/read-file-as-string (path)
    (with-temp-buffer
      (insert-file-contents path)
      (buffer-string)))

  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp ,(kraken/org-path "Projects.org") "Projects" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
      ("ts" "Clocked Entry Subtask" entry (clock)
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
      ("tp" "New Project" entry (file+olp ,(kraken/org-path "Projects.org") "Projects" "Inbox")
           "* PLAN %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree ,(kraken/get-todays-journal-file-name))
           ;"\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ,(kraken/read-file-as-string "~/.org/notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree ,(kraken/get-todays-journal-file-name))
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)
      ("jt" "Thinking" entry
           (file+olp+datetree ,(kraken/get-todays-journal-file-name))
           "\n* %<%I:%M %p> - %^{Topic} :thoughts:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)
      ("jc" "Clocked Entry Notes" entry
           (file+olp+datetree ,(kraken/get-todays-journal-file-name))
           "* %<%I:%M %p> - %K :notes:\n\n%?"
           :empty-lines 1)
      ("jg" "Clocked General Task" entry
           (file+olp+datetree ,(kraken/get-todays-journal-file-name))
           "* %<%I:%M %p> - %^{Task description} %^g\n\n%?"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree ,(kraken/get-todays-journal-file-name))
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "~/.org/notes/Metrics.org" "Weight")
       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer)
      ("mp" "Blood Pressure" table-line (file+headline "~/.org/notes/Metrics.org" "Blood Pressure")
       "| %U | %^{Systolic} | %^{Diastolic} | %^{Notes}" :kill-buffer)))

#+end_src

* Module Setup

This Org file produces a file called =kraken-workflow.el= which gets loaded up in =init.el=; export it as a feature so that it can be loaded with =require=.

#+begin_src emacs-lisp

(provide 'kraken-workflow)

#+end_src
