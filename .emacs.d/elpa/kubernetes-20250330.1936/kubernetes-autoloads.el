;;; kubernetes-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from kubernetes-ast.el

(register-definition-prefixes "kubernetes-ast" '("kubernetes-ast-"))


;;; Generated autoloads from kubernetes-commands.el

(autoload 'kubernetes-mark-for-delete "kubernetes-commands" "\
Mark the thing at POINT for deletion, then advance to the next line.

(fn POINT)" t)
(autoload 'kubernetes-unmark "kubernetes-commands" "\
Unmark the thing at POINT, then advance to the next line.

(fn POINT)" t)
(autoload 'kubernetes-unmark-all "kubernetes-commands" "\
Unmark everything in the buffer." t)
(autoload 'kubernetes-execute-marks "kubernetes-commands" "\
Action all marked items in the buffer." t)
(autoload 'kubernetes-kill-buffers "kubernetes-commands" "\
Kill all `kubernetes-mode' buffers.

With prefix argument NO-CONFIRM, skips confirmation prior to killing all
buffers.

(fn &optional NO-CONFIRM)" t)
(autoload 'kubernetes-copy-thing-at-point "kubernetes-commands" "\
Perform a context-sensitive copy action.

Inspects the `kubernetes-copy' text property at POINT to determine
what to copy.

(fn POINT)" t)
(autoload 'kubernetes-refresh "kubernetes-commands" "\
Force Kubernetes buffers to redraw.

With optional argument VERBOSE, log status changes.

(fn &optional VERBOSE)" t)
(autoload 'kubernetes-navigate "kubernetes-commands" "\
Perform a context-sensitive navigation action.

STATE is the current application state.

Inspecs the `kubernetes-nav' text property at POINT to determine
how to navigate.  If that property is not found, attempt to toggle
the magit section at point.

(fn POINT STATE)" t)
(autoload 'kubernetes-describe-dwim "kubernetes-commands" "\
Describe the thing at point.

THING must be a valid target for `kubectl describe'.

(fn THING)" t)
(autoload 'kubernetes-describe-pod "kubernetes-commands" "\
Display a buffer for describing a pod.

POD-NAME is the name of the pod to describe.

(fn POD-NAME)" t)
(autoload 'kubernetes-set-namespace "kubernetes-commands" "\
Set the namespace to query to NS.

Overrides the namespace settings for the current context.

STATE is the current application state.

(fn NS STATE)" t)
(autoload 'kubernetes-edit-resource-dwim "kubernetes-commands" "\
Edit the resource at point.

THING must be a valid target for `kubectl edit'.

(fn THING)" t)
(register-definition-prefixes "kubernetes-commands" '("kubernetes-"))


;;; Generated autoloads from kubernetes-configmaps.el

(autoload 'kubernetes-display-configmap "kubernetes-configmaps" "\
Display information for a configmap in a new window.

STATE is the current application state.

CONFIGMAP-NAME is the name of the configmap to display.

(fn CONFIGMAP-NAME STATE)" t)
(register-definition-prefixes "kubernetes-configmaps" '("kubernetes-configmaps-"))


;;; Generated autoloads from kubernetes-contexts.el

(autoload 'kubernetes-display-config "kubernetes-contexts" "\
Display information for CONFIG in a new window.

(fn CONFIG)" t)
(register-definition-prefixes "kubernetes-contexts" '("kubernetes-"))


;;; Generated autoloads from kubernetes-core.el

(register-definition-prefixes "kubernetes-core" '("kubernetes-"))


;;; Generated autoloads from kubernetes-cronjobs.el

(register-definition-prefixes "kubernetes-cronjobs" '("kubernetes-"))


;;; Generated autoloads from kubernetes-deployments.el

(register-definition-prefixes "kubernetes-deployments" '("kubernetes-d"))


;;; Generated autoloads from kubernetes-describe.el

(autoload 'kubernetes-describe-generic-resource "kubernetes-describe" "\
Display a buffer for describing a Kubernetes RESOURCE-TYPE.
Prompts for the resource name, with a default from point if available.

(fn RESOURCE-TYPE)" t)
(autoload 'kubernetes-describe-dwim "kubernetes-describe" "\
Describe the resource at point.

The resource at point must be a valid target for `kubectl describe'." t)
(defalias 'kubernetes-describe-pod (lambda (pod-name) (interactive (list (or (kubernetes-utils-maybe-pod-name-at-point) (kubernetes-pods--read-name (kubernetes-state))))) (kubernetes-describe-resource "pod" pod-name)) "\
Display a buffer for describing a pod.
POD-NAME is the name of the pod to describe.")
(defalias 'kubernetes-describe-deployment (lambda (deployment-name) (interactive (list (or (kubernetes-utils-maybe-deployment-name-at-point) (kubernetes-deployments--read-name (kubernetes-state))))) (kubernetes-describe-resource "deployment" deployment-name)) "\
Display a buffer for describing a deployment.
DEPLOYMENT-NAME is the name of the deployment to describe.")
(defalias 'kubernetes-describe-service (lambda (service-name) (interactive (list (or (kubernetes-utils-get-resource-name-at-point "service") (kubernetes-services--read-name (kubernetes-state))))) (kubernetes-describe-resource "service" service-name)) "\
Display a buffer for describing a service.
SERVICE-NAME is the name of the service to describe.")
(defalias 'kubernetes-describe-node (lambda (node-name) (interactive (list (or (kubernetes-utils-get-resource-name-at-point "node") (kubernetes-nodes--read-name (kubernetes-state))))) (kubernetes-describe-resource "node" node-name)) "\
Display a buffer for describing a node.
NODE-NAME is the name of the node to describe.")
(defalias 'kubernetes-describe-statefulset (lambda (statefulset-name) (interactive (list (or (kubernetes-utils-maybe-statefulset-name-at-point) (kubernetes-statefulsets--read-name (kubernetes-state))))) (kubernetes-describe-resource "statefulset" statefulset-name)) "\
Display a buffer for describing a statefulset.
STATEFULSET-NAME is the name of the statefulset to describe.")
(defalias 'kubernetes-describe-job (lambda (job-name) (interactive (list (or (kubernetes-utils-maybe-job-name-at-point) (kubernetes-jobs--read-name (kubernetes-state))))) (kubernetes-describe-resource "job" job-name)) "\
Display a buffer for describing a job.
JOB-NAME is the name of the job to describe.")
(register-definition-prefixes "kubernetes-describe" '("kubernetes-"))


;;; Generated autoloads from kubernetes-el-tramp.el

(register-definition-prefixes "kubernetes-el-tramp" '("get--tramp-file-path" "kubernetes-tramp-"))


;;; Generated autoloads from kubernetes-errors.el

(register-definition-prefixes "kubernetes-errors" '("kubernetes-errors-render"))


;;; Generated autoloads from kubernetes-events.el

(autoload 'kubernetes-events-mode "kubernetes-events" "\
Mode for displaying Kubernetes events.

\\<kubernetes-events-mode-map>Type \\[kubernetes-events-refresh] to refresh the events list.
Type \\[kubernetes-events-quit] to quit the events buffer.
Type \\[kubernetes-events-inspect-event] to view details of the event at point.
Type \\[kubernetes-events-view-message] to view the full message of the event at point.

\\{kubernetes-events-mode-map}

(fn)" t)
(autoload 'kubernetes-events-fetch "kubernetes-events" "\
Display events in a new buffer.
If RESOURCE-TYPE and RESOURCE-NAME are provided, filter events for that resource.
ARGS are additional arguments to pass to kubectl.

(fn &optional RESOURCE-TYPE RESOURCE-NAME ARGS)" t)
(autoload 'kubernetes-events-fetch-all "kubernetes-events" "\
Show all events in the cluster.
ARGS are additional arguments to pass to kubectl.
STATE is the current application state.

(fn &optional ARGS STATE)" t)
(autoload 'kubernetes-events-refresh "kubernetes-events" "\
Refresh the events buffer." t)
(autoload 'kubernetes-events-quit "kubernetes-events" "\
Quit the events buffer." t)
(autoload 'kubernetes-events-inspect-event "kubernetes-events" "\
Inspect the event at point." t)
(autoload 'kubernetes-events-view-message "kubernetes-events" "\
View the full message of the event at point in a separate buffer." t)
(autoload 'kubernetes-events-view-resource-at-point "kubernetes-events" "\
View the resource referenced by the event at point." t)
(register-definition-prefixes "kubernetes-events" '("kubernetes-events-"))


;;; Generated autoloads from kubernetes-exec.el

(autoload 'kubernetes-exec-into "kubernetes-exec" "\
Open a terminal for executing into a pod or other resource.

If POD-NAME is actually prefixed with a resource type (e.g. deployment/my-deploy),
it will be handled appropriately.

ARGS are additional args to pass to kubectl.
EXEC-COMMAND is the command to run in the container.
STATE is the current application state.

(fn POD-NAME ARGS EXEC-COMMAND STATE)" t)
(autoload 'kubernetes-exec-using-vterm "kubernetes-exec" "\
Open a vterm terminal for exec into a pod or other resource.

POD-NAME is the name of the pod to exec into or a resource/name combination.
ARGS are additional args to pass to kubectl.
EXEC-COMMAND is the command to run in the container.
STATE is the current application state.

(fn POD-NAME ARGS EXEC-COMMAND STATE)" t)
(autoload 'kubernetes-exec-switch-buffers "kubernetes-exec" "\
List all Kubernetes exec buffers and allow selecting one." t)
(autoload 'kubernetes-exec-reset-and-launch "kubernetes-exec" "\
Reset the manually selected resource and launch the exec transient menu." t)
(register-definition-prefixes "kubernetes-exec" '("kubernetes-"))


;;; Generated autoloads from kubernetes-ingress.el

(autoload 'kubernetes-display-ingress "kubernetes-ingress" "\
Display information for a ingress in a new window.

STATE is the current application state.

INGRESS-NAME is the name of the ingress to display.

(fn INGRESS-NAME STATE)" t)
(register-definition-prefixes "kubernetes-ingress" '("kubernetes-ingress-"))


;;; Generated autoloads from kubernetes-jobs.el

(autoload 'kubernetes-display-job "kubernetes-jobs" "\
Display information for a job in a new window.

STATE is the current application state.

JOB-NAME is the name of the job to display.

(fn JOB-NAME STATE)" t)
(register-definition-prefixes "kubernetes-jobs" '("kubernetes-jobs-"))


;;; Generated autoloads from kubernetes-kubectl.el

(register-definition-prefixes "kubernetes-kubectl" '("kubernetes-kubectl-"))


;;; Generated autoloads from kubernetes-labels.el

(autoload 'kubernetes-show-pods-for-label "kubernetes-labels" "\
Display a buffer for pods matching a label.

LABEL-QUERY is a string used to match pods.

(fn LABEL-QUERY)" t)
(register-definition-prefixes "kubernetes-labels" '("kubernetes-labels--"))


;;; Generated autoloads from kubernetes-logs.el

(autoload 'kubernetes-logs-inspect-line "kubernetes-logs" "\
Show detail for the log line at POS.

(fn POS)" t)
(autoload 'kubernetes-logs-previous-line "kubernetes-logs" "\
Move backward and inspect the line at point." t)
(autoload 'kubernetes-logs-forward-line "kubernetes-logs" "\
Move forward and inspect the line at point." t)
(autoload 'kubernetes-logs-fetch-all "kubernetes-logs" "\
Open a logs buffer for a resource.

RESOURCE-TYPE is the type of resource (pod, deployment, statefulset, job, service).
RESOURCE-NAME is the name of the resource to log.
ARGS are additional args to pass to kubectl.
STATE is the current application state.

(fn RESOURCE-TYPE RESOURCE-NAME ARGS STATE)" t)
(autoload 'kubernetes-logs-follow "kubernetes-logs" "\
Open a streaming logs buffer for a resource.

RESOURCE-TYPE is the type of resource (pod, deployment, statefulset, job, service).
RESOURCE-NAME is the name of the resource to log.
ARGS are additional args to pass to kubectl.
STATE is the current application state.

(fn RESOURCE-TYPE RESOURCE-NAME ARGS STATE)" t)
(autoload 'kubernetes-logs-follow "kubernetes-logs" "\
Open a streaming logs buffer for a resource at point or selected by user.
ARGS are additional args to pass to kubectl.
STATE is the current application state.

(fn ARGS STATE)")
(autoload 'kubernetes-logs-refresh "kubernetes-logs" "\
Refresh logs in the current buffer." t)
(autoload 'kubernetes-logs-reset-and-launch "kubernetes-logs" "\
Reset the manually selected resource and launch the logs transient menu." t)
(defvar kubernetes-logs-mode-map (let ((keymap (make-sparse-keymap))) (define-key keymap (kbd "n") #'kubernetes-logs-forward-line) (define-key keymap (kbd "p") #'kubernetes-logs-previous-line) (define-key keymap (kbd "RET") #'kubernetes-logs-inspect-line) (define-key keymap (kbd "g") #'kubernetes-logs-refresh) (define-key keymap (kbd "M-w") nil) keymap) "\
Keymap for `kubernetes-logs-mode'.")
(autoload 'kubernetes-logs-mode "kubernetes-logs" "\
Mode for displaying and inspecting Kubernetes logs.

\\<kubernetes-logs-mode-map>Type \\[kubernetes-logs-inspect-line] to open the line at point in a new buffer.
Type \\[kubernetes-logs-refresh] to refresh the logs in the current buffer.

\\{kubernetes-logs-mode-map}

(fn)" t)
(defvar kubernetes-log-line-mode-map (let ((keymap (make-sparse-keymap))) (define-key keymap (kbd "n") #'kubernetes-logs-forward-line) (define-key keymap (kbd "p") #'kubernetes-logs-previous-line) keymap) "\
Keymap for `kubernetes-log-line-mode'.")
(autoload 'kubernetes-log-line-mode "kubernetes-logs" "\
Mode for inspecting Kubernetes log lines.

\\{kubernetes-log-line-mode-map}

(fn)" t)
(autoload 'kubernetes-logs-switch-buffers "kubernetes-logs" "\
List all Kubernetes log buffers and allow selecting one." t)
(register-definition-prefixes "kubernetes-logs" '("kubernetes-logs-"))


;;; Generated autoloads from kubernetes-modes.el

(autoload 'kubernetes-display-thing-mode "kubernetes-modes" "\
Mode for inspecting a Kubernetes object.

\\{kubernetes-display-thing-mode-map}

(fn)" t)
(defvar kubernetes-mode-map (let ((keymap (make-sparse-keymap))) (define-key keymap (kbd "p") #'magit-section-backward) (define-key keymap (kbd "n") #'magit-section-forward) (define-key keymap (kbd "M-p") #'magit-section-backward-sibling) (define-key keymap (kbd "M-n") #'magit-section-forward-sibling) (define-key keymap (kbd "C-i") #'magit-section-toggle) (define-key keymap (kbd "^") #'magit-section-up) (define-key keymap [tab] #'magit-section-toggle) (define-key keymap [C-tab] #'magit-section-cycle) (define-key keymap [M-tab] #'magit-section-cycle-diffs) (define-key keymap [S-tab] #'magit-section-cycle-global) (define-key keymap (kbd "q") #'quit-window) (define-key keymap (kbd "Q") #'kubernetes-kill-buffers-and-processes) (define-key keymap (kbd "RET") #'kubernetes-navigate) (define-key keymap (kbd "M-w") #'kubernetes-copy-thing-at-point) (define-key keymap (kbd "h") #'describe-mode) (define-key keymap (kbd "P") #'kubernetes-proxy) (define-key keymap (kbd "?") #'kubernetes-dispatch) (define-key keymap (kbd "c") #'kubernetes-config-popup) (define-key keymap (kbd "C") #'kubernetes-context) (define-key keymap (kbd "d") #'kubernetes-describe) (define-key keymap (kbd "D") #'kubernetes-mark-for-delete) (define-key keymap (kbd "e") #'kubernetes-exec) (define-key keymap (kbd "E") #'kubernetes-edit) (define-key keymap (kbd "f") #'kubernetes-file) (define-key keymap (kbd "g") #'kubernetes-refresh) (define-key keymap (kbd "l") #'kubernetes-logs) (define-key keymap (kbd "L") #'kubernetes-labels) (define-key keymap (kbd "T") #'kubernetes-events) (define-key keymap (kbd "u") #'kubernetes-unmark) (define-key keymap (kbd "U") #'kubernetes-unmark-all) (define-key keymap (kbd "x") #'kubernetes-execute-marks) keymap) "\
Keymap for `kubernetes-mode'.  This is the base keymap for all derived modes.")
(autoload 'kubernetes-mode "kubernetes-modes" "\
Base mode for Kubernetes modes.

\\{kubernetes-mode-map}

(fn)" t)


;;; Generated autoloads from kubernetes-namespaces.el

(autoload 'kubernetes-display-namespace "kubernetes-namespaces" "\
Display information for a namespace in a new window.

STATE is the current application state.

NAMESPACE-NAME is the name of the namespace to display.

(fn NAMESPACE-NAME STATE)" t)
(register-definition-prefixes "kubernetes-namespaces" '("kubernetes-namespaces--read-name"))


;;; Generated autoloads from kubernetes-networkpolicies.el

(register-definition-prefixes "kubernetes-networkpolicies" '("kubernetes-"))


;;; Generated autoloads from kubernetes-nodes.el

(autoload 'kubernetes-display-node "kubernetes-nodes" "\
Display information for a node in a new window.

STATE is the current application state.

NODE-NAME is the name of the node to display.

(fn NODE-NAME STATE)" t)
(register-definition-prefixes "kubernetes-nodes" '("kubernetes-nodes--"))


;;; Generated autoloads from kubernetes-overview.el

(autoload 'kubernetes-overview-mode "kubernetes-overview" "\
Mode for working with Kubernetes overview.

\\<kubernetes-overview-mode-map>Type \\[kubernetes-overview-set-sections] to choose which resources to display.

Type \\[kubernetes-mark-for-delete] to mark an object for deletion, and \\[kubernetes-execute-marks] to execute.
Type \\[kubernetes-unmark] to unmark the object at point, or \\[kubernetes-unmark-all] to unmark all objects.

Type \\[kubernetes-navigate] to inspect the object on the current line.

Type \\[kubernetes-copy-thing-at-point] to copy the thing at point.

Type \\[kubernetes-refresh] to refresh the buffer.

\\{kubernetes-overview-mode-map}

(fn)" t)
(autoload 'kubernetes-overview "kubernetes-overview" "\
Display an overview buffer for Kubernetes." t)
(register-definition-prefixes "kubernetes-overview" '("kubernetes-overview-"))


;;; Generated autoloads from kubernetes-persistentvolumeclaims.el

(register-definition-prefixes "kubernetes-persistentvolumeclaims" '("kubernetes-"))


;;; Generated autoloads from kubernetes-pod-line.el

(register-definition-prefixes "kubernetes-pod-line" '("kubernetes-pod-line-ok-p"))


;;; Generated autoloads from kubernetes-pods.el

(autoload 'kubernetes-display-pod "kubernetes-pods" "\
Display information for a pod in a new window.

STATE is the current application state.

POD-NAME is the name of the pod to display.

(fn POD-NAME STATE)" t)
(register-definition-prefixes "kubernetes-pods" '("kubernetes-pods-"))


;;; Generated autoloads from kubernetes-popups.el

(register-definition-prefixes "kubernetes-popups" '("kubernetes-"))


;;; Generated autoloads from kubernetes-process.el

(register-definition-prefixes "kubernetes-process" '("kubernetes-"))


;;; Generated autoloads from kubernetes-resources.el

(register-definition-prefixes "kubernetes-resources" '("kubernetes--get-all-groups"))


;;; Generated autoloads from kubernetes-secrets.el

(autoload 'kubernetes-display-secret "kubernetes-secrets" "\
Display information for a secret in a new window.

STATE is the current application state.

SECRET-NAME is the name of the secret to display.

(fn SECRET-NAME STATE)" t)
(register-definition-prefixes "kubernetes-secrets" '("kubernetes-secrets-"))


;;; Generated autoloads from kubernetes-services.el

(autoload 'kubernetes-display-service "kubernetes-services" "\
Display information for a service in a new window.

STATE is the current application state.

SERVICE-NAME is the name of the service to display.

(fn SERVICE-NAME STATE)" t)
(register-definition-prefixes "kubernetes-services" '("kubernetes-services-"))


;;; Generated autoloads from kubernetes-state.el

(register-definition-prefixes "kubernetes-state" '("kubernetes-state-"))


;;; Generated autoloads from kubernetes-statefulsets.el

(autoload 'kubernetes-display-statefulset "kubernetes-statefulsets" "\
Display information for a statefulset in a new window.

STATE is the current application state.

STATEFULSET-NAME is the name of the statefulset to display.

(fn STATEFULSET-NAME STATE)" t)
(register-definition-prefixes "kubernetes-statefulsets" '("kubernetes-statefulsets-"))


;;; Generated autoloads from kubernetes-utils.el

(autoload 'kubernetes-utils-maybe-deployment-name-at-point "kubernetes-utils" "\
Return the deployment name if point is on a deployment, nil otherwise.")
(autoload 'kubernetes-utils-maybe-statefulset-name-at-point "kubernetes-utils" "\
Return the statefulset name if point is on a statefulset, nil otherwise.")
(autoload 'kubernetes-utils-maybe-job-name-at-point "kubernetes-utils" "\
Return the job name if point is on a job, nil otherwise.")
(register-definition-prefixes "kubernetes-utils" '("kubernetes-"))


;;; Generated autoloads from kubernetes-vars.el

(register-definition-prefixes "kubernetes-vars" '("kubernetes-"))


;;; Generated autoloads from kubernetes-yaml.el

(register-definition-prefixes "kubernetes-yaml" '("kubernetes-yaml-"))

;;; End of scraped data

(provide 'kubernetes-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; kubernetes-autoloads.el ends here
